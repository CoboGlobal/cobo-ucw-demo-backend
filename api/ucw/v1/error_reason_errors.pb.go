// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsGreeterUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GREETER_UNSPECIFIED.String() && e.Code == 400
}

func ErrorGreeterUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GREETER_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsCoboNodeInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_COBO_NODE_INVALID.String() && e.Code == 400
}

func ErrorCoboNodeInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_COBO_NODE_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsKeyGenDifferentUsers(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_KEY_GEN_DIFFERENT_USERS.String() && e.Code == 400
}

func ErrorKeyGenDifferentUsers(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_KEY_GEN_DIFFERENT_USERS.String(), fmt.Sprintf(format, args...))
}

func IsUnsupportedTransactionType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_TRANSACTION_TYPE.String() && e.Code == 400
}

func ErrorUnsupportedTransactionType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSUPPORTED_TRANSACTION_TYPE.String(), fmt.Sprintf(format, args...))
}

func IsVaultNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VAULT_NOT_FOUND.String() && e.Code == 404
}

func ErrorVaultNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_VAULT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 403
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidRequestParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_REQUEST_PARAMS.String() && e.Code == 400
}

func ErrorInvalidRequestParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_REQUEST_PARAMS.String(), fmt.Sprintf(format, args...))
}
