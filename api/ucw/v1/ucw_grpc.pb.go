// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0
// source: ucw/v1/ucw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserControlWallet_Ping_FullMethodName                   = "/ucw.v1.UserControlWallet/Ping"
	UserControlWallet_Login_FullMethodName                  = "/ucw.v1.UserControlWallet/Login"
	UserControlWallet_BindNode_FullMethodName               = "/ucw.v1.UserControlWallet/BindNode"
	UserControlWallet_GetUserInfo_FullMethodName            = "/ucw.v1.UserControlWallet/GetUserInfo"
	UserControlWallet_InitVault_FullMethodName              = "/ucw.v1.UserControlWallet/InitVault"
	UserControlWallet_ListGroups_FullMethodName             = "/ucw.v1.UserControlWallet/ListGroups"
	UserControlWallet_GetGroup_FullMethodName               = "/ucw.v1.UserControlWallet/GetGroup"
	UserControlWallet_GenerateMainGroup_FullMethodName      = "/ucw.v1.UserControlWallet/GenerateMainGroup"
	UserControlWallet_GenerateRecoveryGroup_FullMethodName  = "/ucw.v1.UserControlWallet/GenerateRecoveryGroup"
	UserControlWallet_RecoverMainGroup_FullMethodName       = "/ucw.v1.UserControlWallet/RecoverMainGroup"
	UserControlWallet_ListTssRequest_FullMethodName         = "/ucw.v1.UserControlWallet/ListTssRequest"
	UserControlWallet_GetTssRequest_FullMethodName          = "/ucw.v1.UserControlWallet/GetTssRequest"
	UserControlWallet_DisasterRecovery_FullMethodName       = "/ucw.v1.UserControlWallet/DisasterRecovery"
	UserControlWallet_CreateWallet_FullMethodName           = "/ucw.v1.UserControlWallet/CreateWallet"
	UserControlWallet_GetWalletInfo_FullMethodName          = "/ucw.v1.UserControlWallet/GetWalletInfo"
	UserControlWallet_AddWalletAddress_FullMethodName       = "/ucw.v1.UserControlWallet/AddWalletAddress"
	UserControlWallet_ListWalletToken_FullMethodName        = "/ucw.v1.UserControlWallet/ListWalletToken"
	UserControlWallet_GetWalletToken_FullMethodName         = "/ucw.v1.UserControlWallet/GetWalletToken"
	UserControlWallet_GetTokenBalance_FullMethodName        = "/ucw.v1.UserControlWallet/GetTokenBalance"
	UserControlWallet_EstimateTransactionFee_FullMethodName = "/ucw.v1.UserControlWallet/EstimateTransactionFee"
	UserControlWallet_CreateTransaction_FullMethodName      = "/ucw.v1.UserControlWallet/CreateTransaction"
	UserControlWallet_ListTransaction_FullMethodName        = "/ucw.v1.UserControlWallet/ListTransaction"
	UserControlWallet_GetTransaction_FullMethodName         = "/ucw.v1.UserControlWallet/GetTransaction"
	UserControlWallet_TransactionWebhook_FullMethodName     = "/ucw.v1.UserControlWallet/TransactionWebhook"
	UserControlWallet_CoboCallback_FullMethodName           = "/ucw.v1.UserControlWallet/CoboCallback"
	UserControlWallet_TssRequestWebhook_FullMethodName      = "/ucw.v1.UserControlWallet/TssRequestWebhook"
	UserControlWallet_TssRequestReport_FullMethodName       = "/ucw.v1.UserControlWallet/TssRequestReport"
	UserControlWallet_TransactionReport_FullMethodName      = "/ucw.v1.UserControlWallet/TransactionReport"
	UserControlWallet_ErrDummyRpc_FullMethodName            = "/ucw.v1.UserControlWallet/ErrDummyRpc"
)

// UserControlWalletClient is the client API for UserControlWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserControlWalletClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	BindNode(ctx context.Context, in *BindNodeRequest, opts ...grpc.CallOption) (*BindNodeReply, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error)
	InitVault(ctx context.Context, in *InitVaultRequest, opts ...grpc.CallOption) (*InitVaultReply, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsReply, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	GenerateMainGroup(ctx context.Context, in *GenerateMainGroupRequest, opts ...grpc.CallOption) (*GenerateMainGroupReply, error)
	GenerateRecoveryGroup(ctx context.Context, in *GenerateRecoveryGroupRequest, opts ...grpc.CallOption) (*GenerateRecoveryGroupReply, error)
	RecoverMainGroup(ctx context.Context, in *RecoverMainGroupRequest, opts ...grpc.CallOption) (*RecoverMainGroupReply, error)
	ListTssRequest(ctx context.Context, in *ListTssRequestRequest, opts ...grpc.CallOption) (*ListTssRequestReply, error)
	GetTssRequest(ctx context.Context, in *GetTssRequestRequest, opts ...grpc.CallOption) (*GetTssRequestReply, error)
	DisasterRecovery(ctx context.Context, in *DisasterRecoveryRequest, opts ...grpc.CallOption) (*DisasterRecoveryReply, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletReply, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoReply, error)
	AddWalletAddress(ctx context.Context, in *AddWalletAddressRequest, opts ...grpc.CallOption) (*AddWalletAddressReply, error)
	ListWalletToken(ctx context.Context, in *ListWalletTokenRequest, opts ...grpc.CallOption) (*ListWalletTokenReply, error)
	GetWalletToken(ctx context.Context, in *GetWalletTokenRequest, opts ...grpc.CallOption) (*GetWalletTokenReply, error)
	GetTokenBalance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetTokenBalanceReply, error)
	EstimateTransactionFee(ctx context.Context, in *EstimateTransactionFeeRequest, opts ...grpc.CallOption) (*EstimateTransactionFeeReply, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error)
	ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (*ListTransactionReply, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionReply, error)
	TransactionWebhook(ctx context.Context, in *TransactionWebhookRequest, opts ...grpc.CallOption) (*TransactionWebhookReply, error)
	CoboCallback(ctx context.Context, in *CoboCallbackRequest, opts ...grpc.CallOption) (*CoboCallbackReply, error)
	TssRequestWebhook(ctx context.Context, in *TssRequestWebhookRequest, opts ...grpc.CallOption) (*TssRequestWebhookReply, error)
	TssRequestReport(ctx context.Context, in *TssRequestReportRequest, opts ...grpc.CallOption) (*TssRequestReportReply, error)
	TransactionReport(ctx context.Context, in *TransactionReportRequest, opts ...grpc.CallOption) (*TransactionReportReply, error)
	ErrDummyRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type userControlWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewUserControlWalletClient(cc grpc.ClientConnInterface) UserControlWalletClient {
	return &userControlWalletClient{cc}
}

func (c *userControlWalletClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, UserControlWallet_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, UserControlWallet_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) BindNode(ctx context.Context, in *BindNodeRequest, opts ...grpc.CallOption) (*BindNodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindNodeReply)
	err := c.cc.Invoke(ctx, UserControlWallet_BindNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) InitVault(ctx context.Context, in *InitVaultRequest, opts ...grpc.CallOption) (*InitVaultReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitVaultReply)
	err := c.cc.Invoke(ctx, UserControlWallet_InitVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupsReply)
	err := c.cc.Invoke(ctx, UserControlWallet_ListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GenerateMainGroup(ctx context.Context, in *GenerateMainGroupRequest, opts ...grpc.CallOption) (*GenerateMainGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateMainGroupReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GenerateMainGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GenerateRecoveryGroup(ctx context.Context, in *GenerateRecoveryGroupRequest, opts ...grpc.CallOption) (*GenerateRecoveryGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRecoveryGroupReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GenerateRecoveryGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) RecoverMainGroup(ctx context.Context, in *RecoverMainGroupRequest, opts ...grpc.CallOption) (*RecoverMainGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverMainGroupReply)
	err := c.cc.Invoke(ctx, UserControlWallet_RecoverMainGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) ListTssRequest(ctx context.Context, in *ListTssRequestRequest, opts ...grpc.CallOption) (*ListTssRequestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTssRequestReply)
	err := c.cc.Invoke(ctx, UserControlWallet_ListTssRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetTssRequest(ctx context.Context, in *GetTssRequestRequest, opts ...grpc.CallOption) (*GetTssRequestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTssRequestReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetTssRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) DisasterRecovery(ctx context.Context, in *DisasterRecoveryRequest, opts ...grpc.CallOption) (*DisasterRecoveryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisasterRecoveryReply)
	err := c.cc.Invoke(ctx, UserControlWallet_DisasterRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletReply)
	err := c.cc.Invoke(ctx, UserControlWallet_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletInfoReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetWalletInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) AddWalletAddress(ctx context.Context, in *AddWalletAddressRequest, opts ...grpc.CallOption) (*AddWalletAddressReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWalletAddressReply)
	err := c.cc.Invoke(ctx, UserControlWallet_AddWalletAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) ListWalletToken(ctx context.Context, in *ListWalletTokenRequest, opts ...grpc.CallOption) (*ListWalletTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWalletTokenReply)
	err := c.cc.Invoke(ctx, UserControlWallet_ListWalletToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetWalletToken(ctx context.Context, in *GetWalletTokenRequest, opts ...grpc.CallOption) (*GetWalletTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletTokenReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetWalletToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetTokenBalance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetTokenBalanceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenBalanceReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetTokenBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) EstimateTransactionFee(ctx context.Context, in *EstimateTransactionFeeRequest, opts ...grpc.CallOption) (*EstimateTransactionFeeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateTransactionFeeReply)
	err := c.cc.Invoke(ctx, UserControlWallet_EstimateTransactionFee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionReply)
	err := c.cc.Invoke(ctx, UserControlWallet_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (*ListTransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionReply)
	err := c.cc.Invoke(ctx, UserControlWallet_ListTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionReply)
	err := c.cc.Invoke(ctx, UserControlWallet_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) TransactionWebhook(ctx context.Context, in *TransactionWebhookRequest, opts ...grpc.CallOption) (*TransactionWebhookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionWebhookReply)
	err := c.cc.Invoke(ctx, UserControlWallet_TransactionWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) CoboCallback(ctx context.Context, in *CoboCallbackRequest, opts ...grpc.CallOption) (*CoboCallbackReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoboCallbackReply)
	err := c.cc.Invoke(ctx, UserControlWallet_CoboCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) TssRequestWebhook(ctx context.Context, in *TssRequestWebhookRequest, opts ...grpc.CallOption) (*TssRequestWebhookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TssRequestWebhookReply)
	err := c.cc.Invoke(ctx, UserControlWallet_TssRequestWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) TssRequestReport(ctx context.Context, in *TssRequestReportRequest, opts ...grpc.CallOption) (*TssRequestReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TssRequestReportReply)
	err := c.cc.Invoke(ctx, UserControlWallet_TssRequestReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) TransactionReport(ctx context.Context, in *TransactionReportRequest, opts ...grpc.CallOption) (*TransactionReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionReportReply)
	err := c.cc.Invoke(ctx, UserControlWallet_TransactionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControlWalletClient) ErrDummyRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, UserControlWallet_ErrDummyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserControlWalletServer is the server API for UserControlWallet service.
// All implementations must embed UnimplementedUserControlWalletServer
// for forward compatibility
type UserControlWalletServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	BindNode(context.Context, *BindNodeRequest) (*BindNodeReply, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error)
	InitVault(context.Context, *InitVaultRequest) (*InitVaultReply, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	GenerateMainGroup(context.Context, *GenerateMainGroupRequest) (*GenerateMainGroupReply, error)
	GenerateRecoveryGroup(context.Context, *GenerateRecoveryGroupRequest) (*GenerateRecoveryGroupReply, error)
	RecoverMainGroup(context.Context, *RecoverMainGroupRequest) (*RecoverMainGroupReply, error)
	ListTssRequest(context.Context, *ListTssRequestRequest) (*ListTssRequestReply, error)
	GetTssRequest(context.Context, *GetTssRequestRequest) (*GetTssRequestReply, error)
	DisasterRecovery(context.Context, *DisasterRecoveryRequest) (*DisasterRecoveryReply, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletReply, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoReply, error)
	AddWalletAddress(context.Context, *AddWalletAddressRequest) (*AddWalletAddressReply, error)
	ListWalletToken(context.Context, *ListWalletTokenRequest) (*ListWalletTokenReply, error)
	GetWalletToken(context.Context, *GetWalletTokenRequest) (*GetWalletTokenReply, error)
	GetTokenBalance(context.Context, *GetTokenBalanceRequest) (*GetTokenBalanceReply, error)
	EstimateTransactionFee(context.Context, *EstimateTransactionFeeRequest) (*EstimateTransactionFeeReply, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
	ListTransaction(context.Context, *ListTransactionRequest) (*ListTransactionReply, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error)
	TransactionWebhook(context.Context, *TransactionWebhookRequest) (*TransactionWebhookReply, error)
	CoboCallback(context.Context, *CoboCallbackRequest) (*CoboCallbackReply, error)
	TssRequestWebhook(context.Context, *TssRequestWebhookRequest) (*TssRequestWebhookReply, error)
	TssRequestReport(context.Context, *TssRequestReportRequest) (*TssRequestReportReply, error)
	TransactionReport(context.Context, *TransactionReportRequest) (*TransactionReportReply, error)
	ErrDummyRpc(context.Context, *emptypb.Empty) (*ErrorResponse, error)
	mustEmbedUnimplementedUserControlWalletServer()
}

// UnimplementedUserControlWalletServer must be embedded to have forward compatible implementations.
type UnimplementedUserControlWalletServer struct {
}

func (UnimplementedUserControlWalletServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserControlWalletServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserControlWalletServer) BindNode(context.Context, *BindNodeRequest) (*BindNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindNode not implemented")
}
func (UnimplementedUserControlWalletServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserControlWalletServer) InitVault(context.Context, *InitVaultRequest) (*InitVaultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitVault not implemented")
}
func (UnimplementedUserControlWalletServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedUserControlWalletServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedUserControlWalletServer) GenerateMainGroup(context.Context, *GenerateMainGroupRequest) (*GenerateMainGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMainGroup not implemented")
}
func (UnimplementedUserControlWalletServer) GenerateRecoveryGroup(context.Context, *GenerateRecoveryGroupRequest) (*GenerateRecoveryGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRecoveryGroup not implemented")
}
func (UnimplementedUserControlWalletServer) RecoverMainGroup(context.Context, *RecoverMainGroupRequest) (*RecoverMainGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverMainGroup not implemented")
}
func (UnimplementedUserControlWalletServer) ListTssRequest(context.Context, *ListTssRequestRequest) (*ListTssRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTssRequest not implemented")
}
func (UnimplementedUserControlWalletServer) GetTssRequest(context.Context, *GetTssRequestRequest) (*GetTssRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTssRequest not implemented")
}
func (UnimplementedUserControlWalletServer) DisasterRecovery(context.Context, *DisasterRecoveryRequest) (*DisasterRecoveryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisasterRecovery not implemented")
}
func (UnimplementedUserControlWalletServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedUserControlWalletServer) GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedUserControlWalletServer) AddWalletAddress(context.Context, *AddWalletAddressRequest) (*AddWalletAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWalletAddress not implemented")
}
func (UnimplementedUserControlWalletServer) ListWalletToken(context.Context, *ListWalletTokenRequest) (*ListWalletTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletToken not implemented")
}
func (UnimplementedUserControlWalletServer) GetWalletToken(context.Context, *GetWalletTokenRequest) (*GetWalletTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletToken not implemented")
}
func (UnimplementedUserControlWalletServer) GetTokenBalance(context.Context, *GetTokenBalanceRequest) (*GetTokenBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBalance not implemented")
}
func (UnimplementedUserControlWalletServer) EstimateTransactionFee(context.Context, *EstimateTransactionFeeRequest) (*EstimateTransactionFeeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateTransactionFee not implemented")
}
func (UnimplementedUserControlWalletServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedUserControlWalletServer) ListTransaction(context.Context, *ListTransactionRequest) (*ListTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedUserControlWalletServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedUserControlWalletServer) TransactionWebhook(context.Context, *TransactionWebhookRequest) (*TransactionWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionWebhook not implemented")
}
func (UnimplementedUserControlWalletServer) CoboCallback(context.Context, *CoboCallbackRequest) (*CoboCallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoboCallback not implemented")
}
func (UnimplementedUserControlWalletServer) TssRequestWebhook(context.Context, *TssRequestWebhookRequest) (*TssRequestWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssRequestWebhook not implemented")
}
func (UnimplementedUserControlWalletServer) TssRequestReport(context.Context, *TssRequestReportRequest) (*TssRequestReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssRequestReport not implemented")
}
func (UnimplementedUserControlWalletServer) TransactionReport(context.Context, *TransactionReportRequest) (*TransactionReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionReport not implemented")
}
func (UnimplementedUserControlWalletServer) ErrDummyRpc(context.Context, *emptypb.Empty) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrDummyRpc not implemented")
}
func (UnimplementedUserControlWalletServer) mustEmbedUnimplementedUserControlWalletServer() {}

// UnsafeUserControlWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserControlWalletServer will
// result in compilation errors.
type UnsafeUserControlWalletServer interface {
	mustEmbedUnimplementedUserControlWalletServer()
}

func RegisterUserControlWalletServer(s grpc.ServiceRegistrar, srv UserControlWalletServer) {
	s.RegisterService(&UserControlWallet_ServiceDesc, srv)
}

func _UserControlWallet_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_BindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).BindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_BindNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).BindNode(ctx, req.(*BindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_InitVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).InitVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_InitVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).InitVault(ctx, req.(*InitVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GenerateMainGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMainGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GenerateMainGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GenerateMainGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GenerateMainGroup(ctx, req.(*GenerateMainGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GenerateRecoveryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRecoveryGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GenerateRecoveryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GenerateRecoveryGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GenerateRecoveryGroup(ctx, req.(*GenerateRecoveryGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_RecoverMainGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverMainGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).RecoverMainGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_RecoverMainGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).RecoverMainGroup(ctx, req.(*RecoverMainGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_ListTssRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTssRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).ListTssRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_ListTssRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).ListTssRequest(ctx, req.(*ListTssRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetTssRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTssRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetTssRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetTssRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetTssRequest(ctx, req.(*GetTssRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_DisasterRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisasterRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).DisasterRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_DisasterRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).DisasterRecovery(ctx, req.(*DisasterRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetWalletInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_AddWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).AddWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_AddWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).AddWalletAddress(ctx, req.(*AddWalletAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_ListWalletToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).ListWalletToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_ListWalletToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).ListWalletToken(ctx, req.(*ListWalletTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetWalletToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetWalletToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetWalletToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetWalletToken(ctx, req.(*GetWalletTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetTokenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetTokenBalance(ctx, req.(*GetTokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_EstimateTransactionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateTransactionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).EstimateTransactionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_EstimateTransactionFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).EstimateTransactionFee(ctx, req.(*EstimateTransactionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_ListTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).ListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_ListTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).ListTransaction(ctx, req.(*ListTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_TransactionWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).TransactionWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_TransactionWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).TransactionWebhook(ctx, req.(*TransactionWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_CoboCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoboCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).CoboCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_CoboCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).CoboCallback(ctx, req.(*CoboCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_TssRequestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TssRequestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).TssRequestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_TssRequestWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).TssRequestWebhook(ctx, req.(*TssRequestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_TssRequestReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TssRequestReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).TssRequestReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_TssRequestReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).TssRequestReport(ctx, req.(*TssRequestReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_TransactionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).TransactionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_TransactionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).TransactionReport(ctx, req.(*TransactionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserControlWallet_ErrDummyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControlWalletServer).ErrDummyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserControlWallet_ErrDummyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControlWalletServer).ErrDummyRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserControlWallet_ServiceDesc is the grpc.ServiceDesc for UserControlWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserControlWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ucw.v1.UserControlWallet",
	HandlerType: (*UserControlWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UserControlWallet_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserControlWallet_Login_Handler,
		},
		{
			MethodName: "BindNode",
			Handler:    _UserControlWallet_BindNode_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserControlWallet_GetUserInfo_Handler,
		},
		{
			MethodName: "InitVault",
			Handler:    _UserControlWallet_InitVault_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _UserControlWallet_ListGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _UserControlWallet_GetGroup_Handler,
		},
		{
			MethodName: "GenerateMainGroup",
			Handler:    _UserControlWallet_GenerateMainGroup_Handler,
		},
		{
			MethodName: "GenerateRecoveryGroup",
			Handler:    _UserControlWallet_GenerateRecoveryGroup_Handler,
		},
		{
			MethodName: "RecoverMainGroup",
			Handler:    _UserControlWallet_RecoverMainGroup_Handler,
		},
		{
			MethodName: "ListTssRequest",
			Handler:    _UserControlWallet_ListTssRequest_Handler,
		},
		{
			MethodName: "GetTssRequest",
			Handler:    _UserControlWallet_GetTssRequest_Handler,
		},
		{
			MethodName: "DisasterRecovery",
			Handler:    _UserControlWallet_DisasterRecovery_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _UserControlWallet_CreateWallet_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _UserControlWallet_GetWalletInfo_Handler,
		},
		{
			MethodName: "AddWalletAddress",
			Handler:    _UserControlWallet_AddWalletAddress_Handler,
		},
		{
			MethodName: "ListWalletToken",
			Handler:    _UserControlWallet_ListWalletToken_Handler,
		},
		{
			MethodName: "GetWalletToken",
			Handler:    _UserControlWallet_GetWalletToken_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _UserControlWallet_GetTokenBalance_Handler,
		},
		{
			MethodName: "EstimateTransactionFee",
			Handler:    _UserControlWallet_EstimateTransactionFee_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _UserControlWallet_CreateTransaction_Handler,
		},
		{
			MethodName: "ListTransaction",
			Handler:    _UserControlWallet_ListTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _UserControlWallet_GetTransaction_Handler,
		},
		{
			MethodName: "TransactionWebhook",
			Handler:    _UserControlWallet_TransactionWebhook_Handler,
		},
		{
			MethodName: "CoboCallback",
			Handler:    _UserControlWallet_CoboCallback_Handler,
		},
		{
			MethodName: "TssRequestWebhook",
			Handler:    _UserControlWallet_TssRequestWebhook_Handler,
		},
		{
			MethodName: "TssRequestReport",
			Handler:    _UserControlWallet_TssRequestReport_Handler,
		},
		{
			MethodName: "TransactionReport",
			Handler:    _UserControlWallet_TransactionReport_Handler,
		},
		{
			MethodName: "ErrDummyRpc",
			Handler:    _UserControlWallet_ErrDummyRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ucw/v1/ucw.proto",
}
