// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.0
// source: ucw/v1/ucw.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserControlWalletAddWalletAddress = "/ucw.v1.UserControlWallet/AddWalletAddress"
const OperationUserControlWalletBindNode = "/ucw.v1.UserControlWallet/BindNode"
const OperationUserControlWalletCoboCallback = "/ucw.v1.UserControlWallet/CoboCallback"
const OperationUserControlWalletCreateTransaction = "/ucw.v1.UserControlWallet/CreateTransaction"
const OperationUserControlWalletCreateWallet = "/ucw.v1.UserControlWallet/CreateWallet"
const OperationUserControlWalletDisasterRecovery = "/ucw.v1.UserControlWallet/DisasterRecovery"
const OperationUserControlWalletErrDummyRpc = "/ucw.v1.UserControlWallet/ErrDummyRpc"
const OperationUserControlWalletEstimateTransactionFee = "/ucw.v1.UserControlWallet/EstimateTransactionFee"
const OperationUserControlWalletGenerateMainGroup = "/ucw.v1.UserControlWallet/GenerateMainGroup"
const OperationUserControlWalletGenerateRecoveryGroup = "/ucw.v1.UserControlWallet/GenerateRecoveryGroup"
const OperationUserControlWalletGetGroup = "/ucw.v1.UserControlWallet/GetGroup"
const OperationUserControlWalletGetTokenBalance = "/ucw.v1.UserControlWallet/GetTokenBalance"
const OperationUserControlWalletGetTransaction = "/ucw.v1.UserControlWallet/GetTransaction"
const OperationUserControlWalletGetTssRequest = "/ucw.v1.UserControlWallet/GetTssRequest"
const OperationUserControlWalletGetUserInfo = "/ucw.v1.UserControlWallet/GetUserInfo"
const OperationUserControlWalletGetWalletInfo = "/ucw.v1.UserControlWallet/GetWalletInfo"
const OperationUserControlWalletGetWalletToken = "/ucw.v1.UserControlWallet/GetWalletToken"
const OperationUserControlWalletInitVault = "/ucw.v1.UserControlWallet/InitVault"
const OperationUserControlWalletListGroups = "/ucw.v1.UserControlWallet/ListGroups"
const OperationUserControlWalletListTransaction = "/ucw.v1.UserControlWallet/ListTransaction"
const OperationUserControlWalletListTssRequest = "/ucw.v1.UserControlWallet/ListTssRequest"
const OperationUserControlWalletListWalletToken = "/ucw.v1.UserControlWallet/ListWalletToken"
const OperationUserControlWalletLogin = "/ucw.v1.UserControlWallet/Login"
const OperationUserControlWalletPing = "/ucw.v1.UserControlWallet/Ping"
const OperationUserControlWalletRecoverMainGroup = "/ucw.v1.UserControlWallet/RecoverMainGroup"
const OperationUserControlWalletTransactionReport = "/ucw.v1.UserControlWallet/TransactionReport"
const OperationUserControlWalletTransactionWebhook = "/ucw.v1.UserControlWallet/TransactionWebhook"
const OperationUserControlWalletTssRequestReport = "/ucw.v1.UserControlWallet/TssRequestReport"
const OperationUserControlWalletTssRequestWebhook = "/ucw.v1.UserControlWallet/TssRequestWebhook"

type UserControlWalletHTTPServer interface {
	AddWalletAddress(context.Context, *AddWalletAddressRequest) (*AddWalletAddressReply, error)
	BindNode(context.Context, *BindNodeRequest) (*BindNodeReply, error)
	CoboCallback(context.Context, *CoboCallbackRequest) (*CoboCallbackReply, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletReply, error)
	DisasterRecovery(context.Context, *DisasterRecoveryRequest) (*DisasterRecoveryReply, error)
	ErrDummyRpc(context.Context, *emptypb.Empty) (*ErrorResponse, error)
	EstimateTransactionFee(context.Context, *EstimateTransactionFeeRequest) (*EstimateTransactionFeeReply, error)
	GenerateMainGroup(context.Context, *GenerateMainGroupRequest) (*GenerateMainGroupReply, error)
	GenerateRecoveryGroup(context.Context, *GenerateRecoveryGroupRequest) (*GenerateRecoveryGroupReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	GetTokenBalance(context.Context, *GetTokenBalanceRequest) (*GetTokenBalanceReply, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error)
	GetTssRequest(context.Context, *GetTssRequestRequest) (*GetTssRequestReply, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoReply, error)
	GetWalletToken(context.Context, *GetWalletTokenRequest) (*GetWalletTokenReply, error)
	InitVault(context.Context, *InitVaultRequest) (*InitVaultReply, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsReply, error)
	ListTransaction(context.Context, *ListTransactionRequest) (*ListTransactionReply, error)
	ListTssRequest(context.Context, *ListTssRequestRequest) (*ListTssRequestReply, error)
	ListWalletToken(context.Context, *ListWalletTokenRequest) (*ListWalletTokenReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	RecoverMainGroup(context.Context, *RecoverMainGroupRequest) (*RecoverMainGroupReply, error)
	TransactionReport(context.Context, *TransactionReportRequest) (*TransactionReportReply, error)
	TransactionWebhook(context.Context, *TransactionWebhookRequest) (*TransactionWebhookReply, error)
	TssRequestReport(context.Context, *TssRequestReportRequest) (*TssRequestReportReply, error)
	TssRequestWebhook(context.Context, *TssRequestWebhookRequest) (*TssRequestWebhookReply, error)
}

func RegisterUserControlWalletHTTPServer(s *http.Server, srv UserControlWalletHTTPServer) {
	r := s.Route("/")
	r.GET("/ping", _UserControlWallet_Ping0_HTTP_Handler(srv))
	r.POST("/users/login", _UserControlWallet_Login0_HTTP_Handler(srv))
	r.POST("/users/node/bind", _UserControlWallet_BindNode0_HTTP_Handler(srv))
	r.GET("/users/info", _UserControlWallet_GetUserInfo0_HTTP_Handler(srv))
	r.POST("/vaults/init", _UserControlWallet_InitVault0_HTTP_Handler(srv))
	r.GET("/vaults/{vault_id}/groups", _UserControlWallet_ListGroups0_HTTP_Handler(srv))
	r.GET("/vaults/{vault_id}/group/{group_id}", _UserControlWallet_GetGroup0_HTTP_Handler(srv))
	r.POST("/vaults/{vault_id}/tss/generate_main_group", _UserControlWallet_GenerateMainGroup0_HTTP_Handler(srv))
	r.POST("/vaults/{vault_id}/tss/generate_recovery_group", _UserControlWallet_GenerateRecoveryGroup0_HTTP_Handler(srv))
	r.POST("/vaults/{vault_id}/tss/recover_main_group", _UserControlWallet_RecoverMainGroup0_HTTP_Handler(srv))
	r.GET("/vaults/{vault_id}/tss/requests", _UserControlWallet_ListTssRequest0_HTTP_Handler(srv))
	r.GET("/vaults/{vault_id}/tss/requests/{tss_request_id}", _UserControlWallet_GetTssRequest0_HTTP_Handler(srv))
	r.GET("/vaults/{vault_id}/disaster_recovery", _UserControlWallet_DisasterRecovery0_HTTP_Handler(srv))
	r.POST("/vaults/{vault_id}/wallets", _UserControlWallet_CreateWallet0_HTTP_Handler(srv))
	r.GET("/wallets/{wallet_id}", _UserControlWallet_GetWalletInfo0_HTTP_Handler(srv))
	r.POST("/wallets/{wallet_id}/address", _UserControlWallet_AddWalletAddress0_HTTP_Handler(srv))
	r.GET("/wallets/{wallet_id}/tokens", _UserControlWallet_ListWalletToken0_HTTP_Handler(srv))
	r.GET("/wallets/{wallet_id}/tokens/{token_id}", _UserControlWallet_GetWalletToken0_HTTP_Handler(srv))
	r.GET("/wallets/{wallet_id}/tokens/{token_id}/balance", _UserControlWallet_GetTokenBalance0_HTTP_Handler(srv))
	r.POST("/wallets/{wallet_id}/transactions/estimate_fee", _UserControlWallet_EstimateTransactionFee0_HTTP_Handler(srv))
	r.POST("/wallets/{wallet_id}/transactions", _UserControlWallet_CreateTransaction0_HTTP_Handler(srv))
	r.GET("/wallets/{wallet_id}/transactions", _UserControlWallet_ListTransaction0_HTTP_Handler(srv))
	r.GET("/wallets/transactions/{transaction_id}", _UserControlWallet_GetTransaction0_HTTP_Handler(srv))
	r.POST("/transactions/webhook", _UserControlWallet_TransactionWebhook0_HTTP_Handler(srv))
	r.POST("/transactions/callback", _UserControlWallet_CoboCallback0_HTTP_Handler(srv))
	r.POST("/tss_requests/webhook", _UserControlWallet_TssRequestWebhook0_HTTP_Handler(srv))
	r.POST("/tss_requests/{tss_request_id}/report", _UserControlWallet_TssRequestReport0_HTTP_Handler(srv))
	r.POST("/transactions/{transaction_id}/report", _UserControlWallet_TransactionReport0_HTTP_Handler(srv))
	r.POST("/dummy/error", _UserControlWallet_ErrDummyRpc0_HTTP_Handler(srv))
}

func _UserControlWallet_Ping0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_Login0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_BindNode0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletBindNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindNode(ctx, req.(*BindNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindNodeReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetUserInfo0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_InitVault0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitVaultRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletInitVault)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitVault(ctx, req.(*InitVaultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitVaultReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_ListGroups0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGroupsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletListGroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroups(ctx, req.(*ListGroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupsReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetGroup0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*GetGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GenerateMainGroup0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateMainGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGenerateMainGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateMainGroup(ctx, req.(*GenerateMainGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateMainGroupReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GenerateRecoveryGroup0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateRecoveryGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGenerateRecoveryGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateRecoveryGroup(ctx, req.(*GenerateRecoveryGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateRecoveryGroupReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_RecoverMainGroup0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecoverMainGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletRecoverMainGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecoverMainGroup(ctx, req.(*RecoverMainGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecoverMainGroupReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_ListTssRequest0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTssRequestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletListTssRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTssRequest(ctx, req.(*ListTssRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTssRequestReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetTssRequest0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTssRequestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetTssRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTssRequest(ctx, req.(*GetTssRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTssRequestReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_DisasterRecovery0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisasterRecoveryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletDisasterRecovery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisasterRecovery(ctx, req.(*DisasterRecoveryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisasterRecoveryReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_CreateWallet0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletCreateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWallet(ctx, req.(*CreateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWalletReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetWalletInfo0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetWalletInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletInfoReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_AddWalletAddress0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWalletAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletAddWalletAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddWalletAddress(ctx, req.(*AddWalletAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddWalletAddressReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_ListWalletToken0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWalletTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletListWalletToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWalletToken(ctx, req.(*ListWalletTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWalletTokenReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetWalletToken0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetWalletToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletToken(ctx, req.(*GetWalletTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletTokenReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetTokenBalance0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTokenBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetTokenBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTokenBalance(ctx, req.(*GetTokenBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTokenBalanceReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_EstimateTransactionFee0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EstimateTransactionFeeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletEstimateTransactionFee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EstimateTransactionFee(ctx, req.(*EstimateTransactionFeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EstimateTransactionFeeReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_CreateTransaction0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletCreateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTransaction(ctx, req.(*CreateTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_ListTransaction0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletListTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTransaction(ctx, req.(*ListTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_GetTransaction0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletGetTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransaction(ctx, req.(*GetTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_TransactionWebhook0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransactionWebhookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletTransactionWebhook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransactionWebhook(ctx, req.(*TransactionWebhookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransactionWebhookReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_CoboCallback0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CoboCallbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletCoboCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CoboCallback(ctx, req.(*CoboCallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CoboCallbackReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_TssRequestWebhook0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TssRequestWebhookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletTssRequestWebhook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TssRequestWebhook(ctx, req.(*TssRequestWebhookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TssRequestWebhookReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_TssRequestReport0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TssRequestReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletTssRequestReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TssRequestReport(ctx, req.(*TssRequestReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TssRequestReportReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_TransactionReport0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransactionReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletTransactionReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransactionReport(ctx, req.(*TransactionReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransactionReportReply)
		return ctx.Result(200, reply)
	}
}

func _UserControlWallet_ErrDummyRpc0_HTTP_Handler(srv UserControlWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserControlWalletErrDummyRpc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ErrDummyRpc(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ErrorResponse)
		return ctx.Result(200, reply)
	}
}

type UserControlWalletHTTPClient interface {
	AddWalletAddress(ctx context.Context, req *AddWalletAddressRequest, opts ...http.CallOption) (rsp *AddWalletAddressReply, err error)
	BindNode(ctx context.Context, req *BindNodeRequest, opts ...http.CallOption) (rsp *BindNodeReply, err error)
	CoboCallback(ctx context.Context, req *CoboCallbackRequest, opts ...http.CallOption) (rsp *CoboCallbackReply, err error)
	CreateTransaction(ctx context.Context, req *CreateTransactionRequest, opts ...http.CallOption) (rsp *CreateTransactionReply, err error)
	CreateWallet(ctx context.Context, req *CreateWalletRequest, opts ...http.CallOption) (rsp *CreateWalletReply, err error)
	DisasterRecovery(ctx context.Context, req *DisasterRecoveryRequest, opts ...http.CallOption) (rsp *DisasterRecoveryReply, err error)
	ErrDummyRpc(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ErrorResponse, err error)
	EstimateTransactionFee(ctx context.Context, req *EstimateTransactionFeeRequest, opts ...http.CallOption) (rsp *EstimateTransactionFeeReply, err error)
	GenerateMainGroup(ctx context.Context, req *GenerateMainGroupRequest, opts ...http.CallOption) (rsp *GenerateMainGroupReply, err error)
	GenerateRecoveryGroup(ctx context.Context, req *GenerateRecoveryGroupRequest, opts ...http.CallOption) (rsp *GenerateRecoveryGroupReply, err error)
	GetGroup(ctx context.Context, req *GetGroupRequest, opts ...http.CallOption) (rsp *GetGroupReply, err error)
	GetTokenBalance(ctx context.Context, req *GetTokenBalanceRequest, opts ...http.CallOption) (rsp *GetTokenBalanceReply, err error)
	GetTransaction(ctx context.Context, req *GetTransactionRequest, opts ...http.CallOption) (rsp *GetTransactionReply, err error)
	GetTssRequest(ctx context.Context, req *GetTssRequestRequest, opts ...http.CallOption) (rsp *GetTssRequestReply, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoRequest, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	GetWalletInfo(ctx context.Context, req *GetWalletInfoRequest, opts ...http.CallOption) (rsp *GetWalletInfoReply, err error)
	GetWalletToken(ctx context.Context, req *GetWalletTokenRequest, opts ...http.CallOption) (rsp *GetWalletTokenReply, err error)
	InitVault(ctx context.Context, req *InitVaultRequest, opts ...http.CallOption) (rsp *InitVaultReply, err error)
	ListGroups(ctx context.Context, req *ListGroupsRequest, opts ...http.CallOption) (rsp *ListGroupsReply, err error)
	ListTransaction(ctx context.Context, req *ListTransactionRequest, opts ...http.CallOption) (rsp *ListTransactionReply, err error)
	ListTssRequest(ctx context.Context, req *ListTssRequestRequest, opts ...http.CallOption) (rsp *ListTssRequestReply, err error)
	ListWalletToken(ctx context.Context, req *ListWalletTokenRequest, opts ...http.CallOption) (rsp *ListWalletTokenReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Ping(ctx context.Context, req *PingRequest, opts ...http.CallOption) (rsp *PingReply, err error)
	RecoverMainGroup(ctx context.Context, req *RecoverMainGroupRequest, opts ...http.CallOption) (rsp *RecoverMainGroupReply, err error)
	TransactionReport(ctx context.Context, req *TransactionReportRequest, opts ...http.CallOption) (rsp *TransactionReportReply, err error)
	TransactionWebhook(ctx context.Context, req *TransactionWebhookRequest, opts ...http.CallOption) (rsp *TransactionWebhookReply, err error)
	TssRequestReport(ctx context.Context, req *TssRequestReportRequest, opts ...http.CallOption) (rsp *TssRequestReportReply, err error)
	TssRequestWebhook(ctx context.Context, req *TssRequestWebhookRequest, opts ...http.CallOption) (rsp *TssRequestWebhookReply, err error)
}

type UserControlWalletHTTPClientImpl struct {
	cc *http.Client
}

func NewUserControlWalletHTTPClient(client *http.Client) UserControlWalletHTTPClient {
	return &UserControlWalletHTTPClientImpl{client}
}

func (c *UserControlWalletHTTPClientImpl) AddWalletAddress(ctx context.Context, in *AddWalletAddressRequest, opts ...http.CallOption) (*AddWalletAddressReply, error) {
	var out AddWalletAddressReply
	pattern := "/wallets/{wallet_id}/address"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletAddWalletAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) BindNode(ctx context.Context, in *BindNodeRequest, opts ...http.CallOption) (*BindNodeReply, error) {
	var out BindNodeReply
	pattern := "/users/node/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletBindNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) CoboCallback(ctx context.Context, in *CoboCallbackRequest, opts ...http.CallOption) (*CoboCallbackReply, error) {
	var out CoboCallbackReply
	pattern := "/transactions/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletCoboCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...http.CallOption) (*CreateTransactionReply, error) {
	var out CreateTransactionReply
	pattern := "/wallets/{wallet_id}/transactions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletCreateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...http.CallOption) (*CreateWalletReply, error) {
	var out CreateWalletReply
	pattern := "/vaults/{vault_id}/wallets"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletCreateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) DisasterRecovery(ctx context.Context, in *DisasterRecoveryRequest, opts ...http.CallOption) (*DisasterRecoveryReply, error) {
	var out DisasterRecoveryReply
	pattern := "/vaults/{vault_id}/disaster_recovery"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletDisasterRecovery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) ErrDummyRpc(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ErrorResponse, error) {
	var out ErrorResponse
	pattern := "/dummy/error"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletErrDummyRpc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) EstimateTransactionFee(ctx context.Context, in *EstimateTransactionFeeRequest, opts ...http.CallOption) (*EstimateTransactionFeeReply, error) {
	var out EstimateTransactionFeeReply
	pattern := "/wallets/{wallet_id}/transactions/estimate_fee"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletEstimateTransactionFee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GenerateMainGroup(ctx context.Context, in *GenerateMainGroupRequest, opts ...http.CallOption) (*GenerateMainGroupReply, error) {
	var out GenerateMainGroupReply
	pattern := "/vaults/{vault_id}/tss/generate_main_group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletGenerateMainGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GenerateRecoveryGroup(ctx context.Context, in *GenerateRecoveryGroupRequest, opts ...http.CallOption) (*GenerateRecoveryGroupReply, error) {
	var out GenerateRecoveryGroupReply
	pattern := "/vaults/{vault_id}/tss/generate_recovery_group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletGenerateRecoveryGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...http.CallOption) (*GetGroupReply, error) {
	var out GetGroupReply
	pattern := "/vaults/{vault_id}/group/{group_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetTokenBalance(ctx context.Context, in *GetTokenBalanceRequest, opts ...http.CallOption) (*GetTokenBalanceReply, error) {
	var out GetTokenBalanceReply
	pattern := "/wallets/{wallet_id}/tokens/{token_id}/balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetTokenBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...http.CallOption) (*GetTransactionReply, error) {
	var out GetTransactionReply
	pattern := "/wallets/transactions/{transaction_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetTssRequest(ctx context.Context, in *GetTssRequestRequest, opts ...http.CallOption) (*GetTssRequestReply, error) {
	var out GetTssRequestReply
	pattern := "/vaults/{vault_id}/tss/requests/{tss_request_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetTssRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/users/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...http.CallOption) (*GetWalletInfoReply, error) {
	var out GetWalletInfoReply
	pattern := "/wallets/{wallet_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetWalletInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) GetWalletToken(ctx context.Context, in *GetWalletTokenRequest, opts ...http.CallOption) (*GetWalletTokenReply, error) {
	var out GetWalletTokenReply
	pattern := "/wallets/{wallet_id}/tokens/{token_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletGetWalletToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) InitVault(ctx context.Context, in *InitVaultRequest, opts ...http.CallOption) (*InitVaultReply, error) {
	var out InitVaultReply
	pattern := "/vaults/init"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletInitVault))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...http.CallOption) (*ListGroupsReply, error) {
	var out ListGroupsReply
	pattern := "/vaults/{vault_id}/groups"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletListGroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...http.CallOption) (*ListTransactionReply, error) {
	var out ListTransactionReply
	pattern := "/wallets/{wallet_id}/transactions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletListTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) ListTssRequest(ctx context.Context, in *ListTssRequestRequest, opts ...http.CallOption) (*ListTssRequestReply, error) {
	var out ListTssRequestReply
	pattern := "/vaults/{vault_id}/tss/requests"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletListTssRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) ListWalletToken(ctx context.Context, in *ListWalletTokenRequest, opts ...http.CallOption) (*ListWalletTokenReply, error) {
	var out ListWalletTokenReply
	pattern := "/wallets/{wallet_id}/tokens"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletListWalletToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) Ping(ctx context.Context, in *PingRequest, opts ...http.CallOption) (*PingReply, error) {
	var out PingReply
	pattern := "/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserControlWalletPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) RecoverMainGroup(ctx context.Context, in *RecoverMainGroupRequest, opts ...http.CallOption) (*RecoverMainGroupReply, error) {
	var out RecoverMainGroupReply
	pattern := "/vaults/{vault_id}/tss/recover_main_group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletRecoverMainGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) TransactionReport(ctx context.Context, in *TransactionReportRequest, opts ...http.CallOption) (*TransactionReportReply, error) {
	var out TransactionReportReply
	pattern := "/transactions/{transaction_id}/report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletTransactionReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) TransactionWebhook(ctx context.Context, in *TransactionWebhookRequest, opts ...http.CallOption) (*TransactionWebhookReply, error) {
	var out TransactionWebhookReply
	pattern := "/transactions/webhook"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletTransactionWebhook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) TssRequestReport(ctx context.Context, in *TssRequestReportRequest, opts ...http.CallOption) (*TssRequestReportReply, error) {
	var out TssRequestReportReply
	pattern := "/tss_requests/{tss_request_id}/report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletTssRequestReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserControlWalletHTTPClientImpl) TssRequestWebhook(ctx context.Context, in *TssRequestWebhookRequest, opts ...http.CallOption) (*TssRequestWebhookReply, error) {
	var out TssRequestWebhookReply
	pattern := "/tss_requests/webhook"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserControlWalletTssRequestWebhook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
