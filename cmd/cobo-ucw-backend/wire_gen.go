// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cobo-ucw-backend/integration/portal"
	"cobo-ucw-backend/internal/biz"
	"cobo-ucw-backend/internal/biz/transaction"
	"cobo-ucw-backend/internal/biz/user"
	"cobo-ucw-backend/internal/biz/vault"
	"cobo-ucw-backend/internal/biz/wallet"
	"cobo-ucw-backend/internal/conf"
	"cobo-ucw-backend/internal/cron"
	"cobo-ucw-backend/internal/data/dao"
	"cobo-ucw-backend/internal/data/database"
	"cobo-ucw-backend/internal/middleware/auth"
	"cobo-ucw-backend/internal/server"
	"cobo-ucw-backend/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, ucw_Auth *conf.UCW_Auth, ucw *conf.UCW, logger log.Logger) (*kratos.App, func(), error) {
	client := portal.NewClient(ucw, logger)
	databaseData, cleanup, err := database.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	daoVault := dao.NewVault(databaseData)
	groupNode := dao.NewGroupNode(databaseData)
	group := dao.NewGroup(databaseData)
	tssRequest := dao.NewTssRequest(databaseData)
	usecase := vault.NewUsecase(ucw, client, daoVault, groupNode, group, tssRequest, databaseData, logger)
	daoTransaction := dao.NewTransaction(databaseData)
	transactionUsecase := transaction.NewUsecase(ucw, logger, client, daoTransaction)
	daoWallet := dao.NewWallet(databaseData)
	address := dao.NewAddress(databaseData)
	walletUsecase := wallet.NewUsecase(client, daoWallet, address, logger)
	daoUser := dao.NewUser(databaseData)
	userNode := dao.NewUserNode(databaseData)
	userVault := dao.NewUserVault(databaseData)
	userUsecase := user.NewUsecase(client, daoUser, userNode, userVault, logger)
	jwtMiddleware := auth.NewJwtMiddleware(ucw_Auth)
	userControlWalletService := service.NewUserControlWalletService(ucw, logger, usecase, transactionUsecase, walletUsecase, userUsecase, jwtMiddleware)
	grpcServer := server.NewGRPCServer(confServer, userControlWalletService, logger)
	httpServer := server.NewHTTPServer(confServer, jwtMiddleware, userControlWalletService, logger)
	v := biz.NewCronRegisters(transactionUsecase, usecase)
	cronCron := cron.NewCron(logger, v...)
	app := newApp(logger, grpcServer, httpServer, cronCron)
	return app, func() {
		cleanup()
	}, nil
}
